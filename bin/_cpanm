#!perl

# DATE
# VERSION

# FRAGMENT id=shcompgen-hint completer=1 for=cpanm

use 5.010001;
use strict;
use warnings;
use Log::Any '$log';

use Complete::Util qw(complete_array_elem complete_file combine_answers);
use Getopt::Long::Complete qw(GetOptionsWithCompletion);

die "This script is for shell completion only\n"
    unless $ENV{COMP_LINE};

my $noop = sub {};

# complete with list of installed modules
my $comp_installed_mods = sub {
    require Complete::Module;

    my %args = @_;

    $log->tracef("Adding completion: installed modules");
    Complete::Module::complete_module(
        word => $args{word},
    );
};

# complete with installable stuff
my $comp_installable = sub {
    require Complete::Module;
    require XPAN::Query;

    my %args = @_;
    my $word   = $args{word} // '';
    my $mirror = $args{mirror}; # XXX support multiple mirrors

    my @answers;

    $log->tracef("Adding completion: tarballs & dirs");
    {
        my $answer = complete_file(
            filter => sub { /\.(zip|tar\.gz|tar\.bz2)$/i || (-d $_) },
            word   => $word,
        );
        $log->tracef("  answer: %s", $answer);
        push @answers, $answer;
    }

    $log->tracef("Adding completion: installed modules (e.g. when upgrading)");
    {
        my $answer = Complete::Module::complete_module(
            word   => $word,
        );
        $log->tracef("  answer: %s", $answer);
        push @answers, $answer;
    }

    $log->tracef("Adding completion: modules from CPAN mirror");
    {
        my $mods = XPAN::Query::list_xpan_modules(
            url   => $mirror,
            query => $word . '%',
        );
        #$log->tracef("all mods: %s", $mods);
        my $answer = [grep {
                if ($word =~ /::\z/) {
                    /\A\Q$word\E[^:]+(::)?\z/i
                } else {
                    /\A\Q$word\E[^:]*(::)?\z/i
                }
        } @$mods];
        $log->tracef("  answer: %s", $answer);
        push @answers, $answer;
    }

    # TODO module name can be suffixed with '@<version>'

    combine_answers(@answers);
};

my $comp_file = sub {
    my %args = @_;

    complete_file(
        word => $args{word},
        ci   => 1,
    );
};

# this is taken from App::cpanminus::script and should be updated from time to
# time.
GetOptionsWithCompletion(
    sub {
        my %args  = @_;
        my $type      = $args{type};
        my $word      = $args{word};
        if ($type eq 'arg') {
            $log->tracef("Completing arg");
            my $seen_opts = $args{seen_opts};
            if ($seen_opts->{'--uninstall'} || $seen_opts->{'--reinstall'}) {
                return $comp_installed_mods->(word=>$word);
            } else {
                return $comp_installable->(
                    word=>$word, mirror=>$seen_opts->{'--mirror'});
            }
        } elsif ($type eq 'optval') {
            my $ospec = $args{ospec};
            my $opt   = $args{opt};
            $log->tracef("Completing optval (opt=$opt)");
            if ($ospec eq 'l|local-lib=s' ||
                    $ospec eq 'L|local-lib-contained=s') {
                return complete_file(filter=>'d', word=>$word);
            } elsif ($ospec eq 'format=s') {
                return complete_array_elem(
                    array=>[qw/tree json yaml dists/], word=>$word);
            } elsif ($ospec eq 'cpanfile=s') {
                return complete_file(word=>$word);
            }
        }
        return [];
    },
    'f|force'   => $noop,
    'n|notest!' => $noop,
    'test-only' => $noop,
    'S|sudo!'   => $noop,
    'v|verbose' => $noop,
    'verify!'   => $noop,
    'q|quiet!'  => $noop,
    'h|help'    => $noop,
    'V|version' => $noop,
    'perl=s'          => $noop,
    'l|local-lib=s'   => $noop,
    'L|local-lib-contained=s' => $noop,
    'self-contained!' => $noop,
    'mirror=s@'       => $noop,
    'mirror-only!'    => $noop,
    'mirror-index=s'  => $noop,
    'cpanmetadb=s'    => $noop,
    'cascade-search!' => $noop,
    'prompt!'         => $noop,
    'installdeps'     => $noop,
    'skip-installed!' => $noop,
    'skip-satisfied!' => $noop,
    'reinstall'       => $noop,
    'interactive!'    => $noop,
    'i|install'       => $noop,
    'info'            => $noop,
    'look'            => $noop,
    'U|uninstall'     => $noop,
    'self-upgrade'    => $noop,
    'uninst-shadows!' => $noop,
    'lwp!'    => $noop,
    'wget!'   => $noop,
    'curl!'   => $noop,
    'auto-cleanup=s' => $noop,
    'man-pages!' => $noop,
    'scandeps'   => $noop,
    'showdeps'   => $noop,
    'format=s'   => $noop,
    'save-dists=s' => $noop,
    'skip-configure!' => $noop,
    'dev!'       => $noop,
    'metacpan!'  => $noop,
    'report-perl-version!' => $noop,
    'configure-timeout=i' => $noop,
    'build-timeout=i' => $noop,
    'test-timeout=i' => $noop,
    'with-develop' => $noop,
    'without-develop' => $noop,
    'with-feature=s' => $noop,
    'without-feature=s' => $noop,
    'with-all-features' => $noop,
    'pp|pureperl!' => $noop,
    "cpanfile=s" => $noop,
    #$self->install_type_handlers,
    #$self->build_args_handlers,
);

# ABSTRACT: Shell completer for cpanm
# PODNAME:

=head1 SYNOPSIS

To install, install this module and then in your bash (and/or bash startup
file):

 complete -C _cpanm cpanm

or, you can use L<shcompgen> to do that for you automatically.

Now L<cpanm> has bash completion:

 % cpanm --s<tab>
 % cpanm --uninstall "Text::A<tab>


=head1 TODO


=head1 FAQ

 % cpanm -U "Text:<tab>
